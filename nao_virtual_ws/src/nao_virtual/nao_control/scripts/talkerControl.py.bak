#!/usr/bin/env python

import rospy
import roslib
roslib.load_manifest('nao_control')
import math 
import tf
import geometry_msgs.msg
from sensor_msgs.msg import JointState
from std_msgs.msg import Header
from std_msgs.msg import Float64
from LowerHalfTrans import *
import numpy as np

def talker():
    pubHeadPitch = rospy.Publisher('/nao_dcm/HeadPitch_position_controller/command', Float64, queue_size=10)
    pubHeadYaw = rospy.Publisher('/nao_dcm/HeadYaw_position_controller/command', Float64, queue_size=10)
    pubLAnklePitch = rospy.Publisher('/nao_dcm/LAnklePitch_position_controller/command', Float64, queue_size=10)
    pubLAnkleRoll = rospy.Publisher('/nao_dcm/LAnkleRoll_position_controller/command', Float64, queue_size=10)
    pubLElbowRoll = rospy.Publisher('/nao_dcm/LElbowRoll_position_controller/command', Float64, queue_size=10)
    pubLElbowYaw = rospy.Publisher('/nao_dcm/LElbowYaw_position_controller/command', Float64, queue_size=10)
    pubLHand = rospy.Publisher('/nao_dcm/LHand_position_controller/command', Float64, queue_size=10)
    pubLHipPitch = rospy.Publisher('/nao_dcm/LHipPitch_position_controller/command', Float64, queue_size=10)
    pubLHipRoll = rospy.Publisher('/nao_dcm/LHipRoll_position_controller/command', Float64, queue_size=10)
    pubLHipYawPitch = rospy.Publisher('/nao_dcm/LHipYawPitch_position_controller/command', Float64, queue_size=10)
    pubLKneePitch = rospy.Publisher('/nao_dcm/LKneePitch_position_controller/command', Float64, queue_size=10)
    pubLShoulderPitch = rospy.Publisher('/nao_dcm/LShoulderPitch_position_controller/command', Float64, queue_size=10)
    pubLShoulderRoll = rospy.Publisher('/nao_dcm/LShoulderRoll_position_controller/command', Float64, queue_size=10)
    pubLWristYaw = rospy.Publisher('/nao_dcm/LWristYaw_position_controller/command', Float64, queue_size=10)
    pubRAnklePitch = rospy.Publisher('/nao_dcm/RAnklePitch_position_controller/command', Float64, queue_size=10)
    pubRAnkleRoll = rospy.Publisher('/nao_dcm/RAnkleRoll_position_controller/command', Float64, queue_size=10)
    pubRElbowRoll = rospy.Publisher('/nao_dcm/RElbowRoll_position_controller/command', Float64, queue_size=10)
    pubRElbowYaw = rospy.Publisher('/nao_dcm/RElbowYaw_position_controller/command', Float64, queue_size=10)
    pubRHand = rospy.Publisher('/nao_dcm/RHand_position_controller/command', Float64, queue_size=10)
    pubRHipPitch = rospy.Publisher('/nao_dcm/RHipPitch_position_controller/command', Float64, queue_size=10)
    pubRHipRoll = rospy.Publisher('/nao_dcm/RHipRoll_position_controller/command', Float64, queue_size=10)
    pubRHipYawPitch = rospy.Publisher('/nao_dcm/RHipYawPitch_position_controller/command', Float64, queue_size=10)
    pubRKneePitch = rospy.Publisher('/nao_dcm/RKneePitch_position_controller/command', Float64, queue_size=10)
    pubRShoulderPitch = rospy.Publisher('/nao_dcm/RShoulderPitch_position_controller/command', Float64, queue_size=10)
    pubRShoulderRoll = rospy.Publisher('/nao_dcm/RShoulderRoll_position_controller/command', Float64, queue_size=10)
    pubRWristYaw = rospy.Publisher('/nao_dcm/RWristYaw_position_controller/command', Float64, queue_size=10)
    rospy.init_node('jointPublisher')
    rate = rospy.Rate(10) # 10hz
    hello_str = JointState()
    hello_str.header = Header()
    while not rospy.is_shutdown():
        hello_str.header.stamp = rospy.Time.now()
        now = rospy.Time.now()
        x0 = np.array([0,0,0])
        x1 = np.array([0,100,0])
        x2 = np.array([100,0,0])
        x3 = np.array([100,100,0])
        x4 = np.array([202.9,0,0])
        x5 = np.array([202.9,100,0])
        x4_1 = np.array([202.9, -25, 100])
        x4_2 = np.array([202.9, -25, -10])
        x5_1 = np.array([202.9, 125, 100])
        x5_2 = np.array([202.9, 125, -10])
        l1 = 100
        l2 = 102.9
        x = np.stack((x0,x1,x2,x3,x4,x5,x4_1,x4_2,x5_1,x5_2))
        control = 363
        roLHipPitch = 0.6
        roRHipPitch = 0.6
        theL = 0
        the4L = 0
        Theta = np.array([roLHipPitch,0,roRHipPitch,0,theL,theL])
        x = lowerHalfTrans(x, Theta)
        x0 = x[0]
        x1 = x[1]
        x2 = x[2]
        x3 = x[3]
        x4 = x[4]
        x5 = x[5]
        x4_1 = x[6]
        x4_2 = x[7]
        x5_1 = x[8]
        x5_2 = x[9]
        #get equation
        p = np.array([control, 50, 300])

        # These two vectors are in the plane
        v1 = x4 - p
        v2 = x5 - p

        # the cross product is a vector normal to the plane
        cp = np.cross(v1, v2)
        cp = cp/np.linalg.norm(cp)
        a, b, c = cp

        if a <= 0:
            a = -a
            b = -b
            c = -c

        # This evaluates a * x3 + b * y3 + c * z3 which equals d
        d = np.dot(cp, p)

        vL = x5 - x3
        thetaLPitch = -atan(c/a) + atan(vL[2]/(vL[0]+0.0001))
        thetaLRoll = atan(b/sqrt(a**2+c**2)) - atan(vL[1]/(sqrt(vL[0]**2+vL[2]**2)))

        vR = x4 - x2
        thetaRPitch = -atan(c/a) + atan(vR[2]/(vR[0]+0.0001))
        thetaRRoll = atan(b/sqrt(a**2+c**2)) - atan(vR[1]/(sqrt(vR[0]**2+vR[2]**2)))
        hello_str.name =  ['HeadYaw', 'HeadPitch', 'LHipYawPitch', 'LHipRoll', 'LHipPitch', 'LKneePitch', 'LAnklePitch', 'LAnkleRoll', 'RHipYawPitch', 'RHipRoll', 'RHipPitch', 'RKneePitch', 'RAnklePitch', 'RAnkleRoll', 'LShoulderPitch', 'LShoulderRoll', 'LElbowYaw', 'LElbowRoll', 'LWristYaw', 'LHand', 'RShoulderPitch', 'RShoulderRoll', 'RElbowYaw', 'RElbowRoll', 'RWristYaw', 'RHand', 'RFinger23', 'RFinger13', 'RFinger12', 'LFinger21', 'LFinger13', 'LFinger11', 'RFinger22', 'LFinger22', 'RFinger21', 'LFinger12', 'RFinger11', 'LFinger23', 'LThumb1', 'RThumb1', 'RThumb2', 'LThumb2']
        hello_str.position = [0 , 0,0.0,0, 0,0,0, 0, 0.0,0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0.0, 0, 0,0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
        hello_str.velocity = []
        hello_str.effort = []
        #pubHeadPitch.publish(hello_str.position[1])
        #pubHeadYaw.publish(hello_str.position[0])
        pubLAnklePitch.publish(thetaLPitch) 
        pubLAnkleRoll.publish(thetaLRoll) 
        #pubLElbowRoll.publish(hello_str.position[17])
        #pubLElbowYaw.publish(hello_str.position[16])
        #pubLHand.publish(hello_str.position[19])
        pubLHipPitch.publish(roLHipPitch)
        pubLHipRoll.publish(hello_str.position[3])
        #pubLHipYawPitch.publish(hello_str.position[2])
        pubLKneePitch.publish(theL)        
        #pubLShoulderPitch.publish(hello_str.position[14])
        #pubLShoulderRoll.publish(hello_str.position[15])
        #pubLWristYaw.publish(hello_str.position[18])
        pubRAnklePitch.publish(thetaRPitch)
        pubRAnkleRoll.publish(thetaRRoll)
        #pubRElbowRoll.publish(hello_str.position[23])
        #pubRElbowYaw.publish(hello_str.position[22])
        #pubRHand.publish(hello_str.position[25])
        pubRHipPitch.publish(roRHipPitch)
        pubRHipRoll.publish(hello_str.position[9])
        #pubRHipYawPitch.publish(hello_str.position[8])
        pubRKneePitch.publish(theL)
        #pubRShoulderPitch.publish(hello_str.position[20])  
        #pubRShoulderRoll.publish(hello_str.position[21])
        #pubRWristYaw.publish(hello_str.position[24])

        rate.sleep()

if __name__ == '__main__':
    try:
        talker()
    except rospy.ROSInterruptException:
        pass
