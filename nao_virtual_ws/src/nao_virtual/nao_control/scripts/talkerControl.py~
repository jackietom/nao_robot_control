#!/usr/bin/env python

import rospy
import roslib
roslib.load_manifest('nao_control')
import math 
import tf
import geometry_msgs.msg
from sensor_msgs.msg import JointState
from std_msgs.msg import Header
from std_msgs.msg import Float64
from LowerHalfTrans import *
from calcAnkle import *
from judge import *
import numpy as np

def talker():
    pubHeadPitch = rospy.Publisher('/nao_dcm/HeadPitch_position_controller/command', Float64, queue_size=10)
    pubHeadYaw = rospy.Publisher('/nao_dcm/HeadYaw_position_controller/command', Float64, queue_size=10)
    pubLAnklePitch = rospy.Publisher('/nao_dcm/LAnklePitch_position_controller/command', Float64, queue_size=10)
    pubLAnkleRoll = rospy.Publisher('/nao_dcm/LAnkleRoll_position_controller/command', Float64, queue_size=10)
    pubLElbowRoll = rospy.Publisher('/nao_dcm/LElbowRoll_position_controller/command', Float64, queue_size=10)
    pubLElbowYaw = rospy.Publisher('/nao_dcm/LElbowYaw_position_controller/command', Float64, queue_size=10)
    pubLHand = rospy.Publisher('/nao_dcm/LHand_position_controller/command', Float64, queue_size=10)
    pubLHipPitch = rospy.Publisher('/nao_dcm/LHipPitch_position_controller/command', Float64, queue_size=10)
    pubLHipRoll = rospy.Publisher('/nao_dcm/LHipRoll_position_controller/command', Float64, queue_size=10)
    pubLHipYawPitch = rospy.Publisher('/nao_dcm/LHipYawPitch_position_controller/command', Float64, queue_size=10)
    pubLKneePitch = rospy.Publisher('/nao_dcm/LKneePitch_position_controller/command', Float64, queue_size=10)
    pubLShoulderPitch = rospy.Publisher('/nao_dcm/LShoulderPitch_position_controller/command', Float64, queue_size=10)
    pubLShoulderRoll = rospy.Publisher('/nao_dcm/LShoulderRoll_position_controller/command', Float64, queue_size=10)
    pubLWristYaw = rospy.Publisher('/nao_dcm/LWristYaw_position_controller/command', Float64, queue_size=10)
    pubRAnklePitch = rospy.Publisher('/nao_dcm/RAnklePitch_position_controller/command', Float64, queue_size=10)
    pubRAnkleRoll = rospy.Publisher('/nao_dcm/RAnkleRoll_position_controller/command', Float64, queue_size=10)
    pubRElbowRoll = rospy.Publisher('/nao_dcm/RElbowRoll_position_controller/command', Float64, queue_size=10)
    pubRElbowYaw = rospy.Publisher('/nao_dcm/RElbowYaw_position_controller/command', Float64, queue_size=10)
    pubRHand = rospy.Publisher('/nao_dcm/RHand_position_controller/command', Float64, queue_size=10)
    pubRHipPitch = rospy.Publisher('/nao_dcm/RHipPitch_position_controller/command', Float64, queue_size=10)
    pubRHipRoll = rospy.Publisher('/nao_dcm/RHipRoll_position_controller/command', Float64, queue_size=10)
    pubRHipYawPitch = rospy.Publisher('/nao_dcm/RHipYawPitch_position_controller/command', Float64, queue_size=10)
    pubRKneePitch = rospy.Publisher('/nao_dcm/RKneePitch_position_controller/command', Float64, queue_size=10)
    pubRShoulderPitch = rospy.Publisher('/nao_dcm/RShoulderPitch_position_controller/command', Float64, queue_size=10)
    pubRShoulderRoll = rospy.Publisher('/nao_dcm/RShoulderRoll_position_controller/command', Float64, queue_size=10)
    pubRWristYaw = rospy.Publisher('/nao_dcm/RWristYaw_position_controller/command', Float64, queue_size=10)
    rospy.init_node('jointPublisher')
    rate = rospy.Rate(10) # 10hz
    hello_str = JointState()
    hello_str.header = Header()
    while not rospy.is_shutdown():
        hello_str.header.stamp = rospy.Time.now()
        now = rospy.Time.now()
        control = 363
        roLHipPitch = 0
        roRHipPitch = 0
        #parameters
        roLHipPitch = 0
        roLHipRoll = 0
        roRHipPitch = 0
        roRHipRoll = 0
        roLKnee = 0
        roRKnee = 0

        for i in range(1,40000):
            #control = 160
            Theta = np.array([roLHipPitch,roLHipRoll,roRHipPitch,roRHipRoll,roLKnee,roRKnee])
            result = calcAnkle(i, Theta)
            result = judge(result,Theta,i)
            if result[0]:
                control = i
            break

        thetaLPitch = result[1]
        thetaLRoll = result[2]
        thetaRPitch = result[3]
        thetaRRoll = result[4]

        hello_str.name =  ['HeadYaw', 'HeadPitch', 'LHipYawPitch', 'LHipRoll', 'LHipPitch', 'LKneePitch', 'LAnklePitch', 'LAnkleRoll', 'RHipYawPitch', 'RHipRoll', 'RHipPitch', 'RKneePitch', 'RAnklePitch', 'RAnkleRoll', 'LShoulderPitch', 'LShoulderRoll', 'LElbowYaw', 'LElbowRoll', 'LWristYaw', 'LHand', 'RShoulderPitch', 'RShoulderRoll', 'RElbowYaw', 'RElbowRoll', 'RWristYaw', 'RHand', 'RFinger23', 'RFinger13', 'RFinger12', 'LFinger21', 'LFinger13', 'LFinger11', 'RFinger22', 'LFinger22', 'RFinger21', 'LFinger12', 'RFinger11', 'LFinger23', 'LThumb1', 'RThumb1', 'RThumb2', 'LThumb2']
        hello_str.position = [0 , 0,0.0,0, 0,0,0, 0, 0.0,0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0.0, 0, 0,0, 0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
        hello_str.velocity = []
        hello_str.effort = []
        #pubHeadPitch.publish(hello_str.position[1])
        #pubHeadYaw.publish(hello_str.position[0])
        pubLAnklePitch.publish(thetaLPitch) 
        pubLAnkleRoll.publish(thetaLRoll) 
        #pubLElbowRoll.publish(hello_str.position[17])
        #pubLElbowYaw.publish(hello_str.position[16])
        #pubLHand.publish(hello_str.position[19])
        pubLHipPitch.publish(roLHipPitch)
        pubLHipRoll.publish(roLHipRoll)
        #pubLHipYawPitch.publish(hello_str.position[2])
        pubLKneePitch.publish(roLKnee)        
        #pubLShoulderPitch.publish(hello_str.position[14])
        #pubLShoulderRoll.publish(hello_str.position[15])
        #pubLWristYaw.publish(hello_str.position[18])
        pubRAnklePitch.publish(thetaRPitch)
        pubRAnkleRoll.publish(thetaRRoll)
        #pubRElbowRoll.publish(hello_str.position[23])
        #pubRElbowYaw.publish(hello_str.position[22])
        #pubRHand.publish(hello_str.position[25])
        pubRHipPitch.publish(roRHipPitch)
        pubRHipRoll.publish(roRHipPitch)
        #pubRHipYawPitch.publish(hello_str.position[8])
        pubRKneePitch.publish(roRKnee)
        #pubRShoulderPitch.publish(hello_str.position[20])  
        #pubRShoulderRoll.publish(hello_str.position[21])
        #pubRWristYaw.publish(hello_str.position[24])

        rate.sleep()

if __name__ == '__main__':
    try:
        talker()
    except rospy.ROSInterruptException:
        pass
